#!/usr/bin/env python

"""
Parse mate-pair reads to get methylation compartments: methylated fragments
and unmethylated fragments.
"""

import sys
import os
import argparse
import datetime
from string import lower

sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../methylanalyzer'))
from MethError import MethError
from MethBuilder import FragmentParser
from UtilityFuncs import check_file

def main(readlib, cmapfile, matesfile, out_dir):
    LOGFH = open(os.path.join(out_dir, 'parse_mates.LOG'), 'a')
    LOGFH.write('Start the program to parse [%s] fragments for [%s] ...  %s\n' % (readlib, matesfile, str(datetime.datetime.now())))
    LOGFH.flush()
    # Initiate the FragmentParser
    matesparser = FragmentParser(CHRMAP=cmapfile)
    # Parse and write to the output files organized by chromosome
    chrs = matesparser.chr_mapping.values()
    chrs_fh = generate_fhs(chrs, readlib, out_dir)
    for chr, fragment in matesparser.parse_mates(matesfile, readlib):
        fout = chrs_fh[chr]
        record = fragment.get_bedrecord(chr)
        fout.write(record + '\n')
    close_fhs(chrs_fh)
    LOGFH.write('Finish the program ...  %s\n\n' % str(datetime.datetime.now()))
    LOGFH.close()
    
def generate_fhs(chrs, readlib, out_dir):
    "Generate file handles and save them in a dict"
    chrs_fh = {}
    for chrN in chrs:
        fname = os.path.join(out_dir, chrN + '_' + lower(readlib) + '.bed')
        fh = open(fname, 'w')
        if readlib == 'RE':  # red
            color = '255,0,0,'
        else:  # McrBC, blue
            color = '0,0,255,'
        # Print headers
        fh.write('browser position %s:1-10000\n' % chrN)
        fh.write('track name="%s %s" description="Fragment data from the %s library" color=%s\n' % \
                 (chrN, readlib, readlib, color))
        chrs_fh[chrN] = fh
    return chrs_fh

def close_fhs(fhs):
    "Close file handles. The argument is a dict"
    for fh in fhs.values():
        fh.close()

def get_readlib(arg):
    lib_dict = {'re': 'RE', 'mcrbc': 'McrBC'}
    return lib_dict[arg]


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Parse mate-pair reads to get methylation compartments: \
    methylated fragments and unmethylated fragments.',
                                     epilog='Save coordinates of parsed methylated/unmethylated fragments \
                                     for each chromosome in BED format, generating files like chr*_re.bed.')
    parser.add_argument('lib', choices=['re', 'mcrbc'], help='sequences generated by the RE or McrBC library')
    parser.add_argument('cmap', help='chromosome map provided by SOLiD')
    parser.add_argument('mates', help='mate-pair reads from either the RE or McrBC library')
    parser.add_argument('--out_dir', default=os.getcwd(), help='directory for parsed fragments, default=current dir')
    # Parse arguments
    args = parser.parse_args()
    readlib = get_readlib(args.lib)    
    try:
        cmapfile = check_file(args.cmap)
        matesfile = check_file(args.mates)
    except MethError, e:
        parser.print_usage()
        print >> sys.stderr, 'MethError: ', e.value
        sys.exit(2)
    if os.path.isdir(args.out_dir):
        out_dir = os.path.abspath(args.out_dir)
    else:
        parser.print_usage()
        print >> sys.stderr, 'Invalid output directory'
        sys.exit(2)
    main(readlib, cmapfile, matesfile, out_dir)
    
